Experience with using SVUnit 2.5
--------------------------------

[16 November 2013, Jonathan Bromley]

1) SETUP
--------
I created a separate working directory for the unit tests. I chose
to make it [my_source_dir]/../utest/.
File SourceMe in this unit test directory simplifies setup, but must
be manually created (just once for the entire project, I hope).

2) DIRECTORIES
--------------
Putting tests in a sibling directory (as here) isn't directly supported.
However, I've fixed that by adding this line to the cfg.mk file in the
SVUnit distribution dir:

  INCDIR   += $(SVUNIT_USER_INCDIR)

and then setting SVUNIT_USER_INCDIR appropriately in SourceMe.

3) TOOL CHOICE
--------------
It's a bit tedious to hand-edit the generated makefile. Would be
far better to have a separate tool-specific makefile that included
the generated one, with one target per tool (or one file per tool?) 
so we could do 
  make questa
or perhaps
  make -f questa.mk

4) SVUNIT VERSION NUMBER
------------------------

There seems to be a problem with how the SVUNIT_VERSION macro gets 
populated. Some places need it to be a single word for the shell, so
it wants enclosing in quotes of some kind. Other places (in SV) seem
to assume that it's bare ASCII text, and put quotes around it for
themselves. It doesn't work straight out of the box. Putting string
quotes around the first line in the VERSION.txt file makes things work,
but messes up the testrunner report. That can be fixed by tweaking 
svunit_pkg.sv (around line 24) as follows:

`define STRINGIFY(S) `"S`"
package svunit_pkg;
  const string svunit_version = `STRINGIFY(`SVUNIT_VERSION);

5) UUT PACKAGE IMPORT
---------------------
The code-generator scripts aren't terribly bright about user code
that's in a package. I had to add package import statements manually
in the generated unit test file.

6) EXCESSIVE USE OF $unit
-------------------------
Lots of stuff gets wildcard-imported into $unit (SV package import
statements outside any module or package). This is generally regarded
as poor practice and I don't think there's any need for it.

7) `FAIL_ macros don't handle expressions containing string quotes
------------------------------------------------------------------
Macros such as FAIL_UNLESS_EQUAL don't work if one of the test
expressions contains string quotes. This is because the macro
adds double-quotes around each test expression to display it,
yielding things like "my_Str.find("A") != 0" which of course is
illegal. I don't know how this could be fixed. It's quite a
nuisance when testing methods that have string arguments.
